{
  "language": "Solidity",
  "sources": {
    "contracts/Renderer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\n\nstruct Semi {\n    uint8 semiType;\n    uint8 x;\n    uint8 y;\n}\n\ninterface ISemiNFT {\n    function semis(uint256) external view returns (Semi memory);\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n    function balanceOf(address owner) external view returns (uint256 balance);\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n\ncontract Renderer is Ownable {\n    using Strings for uint256;\n    using Strings for uint8;\n\n    ISemiNFT public nftContract;\n    string public soundBaseURI = \"https://raw.githubusercontent.com/avcdsld/code-as-art/main/semi/metadata/sounds/\";\n    string public soundURIPostfix = \".mp3\";\n    string public percentEncodedImageBaseURI = \"https%3A%2F%2Fraw.githubusercontent.com%2Favcdsld%2Fcode-as-art%2Fmain%2Fsemi%2Fmetadata%2Fimages%2F\";\n    string public imageURIPostfix = \".png\";\n\n    function setNftContract(address contractAddress) public onlyOwner {\n        nftContract = ISemiNFT(contractAddress);\n    }\n\n    function setSoundBaseURI(string memory uri) public onlyOwner {\n        soundBaseURI = uri;\n    }\n\n    function setSoundURIPostfix(string memory str) public onlyOwner {\n        soundURIPostfix = str;\n    }\n\n    function setPercentEncodedImageBaseURI(string memory uri) public onlyOwner {\n        percentEncodedImageBaseURI = uri;\n    }\n\n    function setImageURIPostfix(string memory str) public onlyOwner {\n        imageURIPostfix = str;\n    }\n\n    function tokenURI(uint256 tokenId) public view returns (string memory) {\n        Semi memory semi = nftContract.semis(tokenId);\n\n        string[4] memory svgParts;\n        svgParts[0] = '%253Csvg%250D%250AviewBox%253D%25220%252C%25200%252C%2520256%252C%2520256%2522%250D%250Axmlns%253D%2522http%253A%252F%252Fwww.w3.org%252F2000%252Fsvg%2522%250D%250Aclass%253D%2522content%2522%250D%250A%253E%250D%250A';\n        svgParts[1] = string.concat(\n            '%253Ccircle%2520cx%253D%2522',\n            (semi.x + 15).toString(),\n            '%2522%2520cy%253D%2522',\n            (semi.y + 15).toString(),\n            '%2522%2520r%253D%252215%2522%2520fill%253D%2522%2523fffdb3%2522%2520%252F%253E'\n        );\n        address owner = nftContract.ownerOf(tokenId);\n        uint256 balance = nftContract.balanceOf(owner);\n        for (uint256 i = 0; i < balance; i++) {\n            uint256 id = nftContract.tokenOfOwnerByIndex(owner, i);\n            Semi memory s = nftContract.semis(id);\n            svgParts[2] = string.concat(\n                svgParts[2],\n                '%253Cimage%250D%250Ax%253D%2522',\n                s.x.toString(),\n                '%2522%250D%250Ay%253D%2522',\n                s.y.toString(),\n                '%2522%250D%250Awidth%253D%252230%2522%250D%250Aheight%253D%252230%2522%250D%250ApreserveAspectRatio%253D%2522xMidYMid%2520meet%2522%250D%250Axlink%253Ahref%253D%2522',\n                percentEncodedImageBaseURI,\n                s.semiType.toString(),\n                imageURIPostfix,\n                '%2522%250D%250Adata-type%253D%2522',\n                s.semiType.toString(),\n                '%2522%252F%253E%250D%250A'\n            );\n        }\n        svgParts[3] = '%253C%252Fsvg%253E';\n\n        string memory js = string.concat(\n            'const semis = document.querySelectorAll(\"image\");',\n            'for (let i = 0, l = semis.length; l > i; i++) {',\n            ' const file = semis[i].getAttribute(\"data-type\");',\n            ' const src = `',\n            soundBaseURI,\n            '${file}',\n            soundURIPostfix,\n            '`;',\n            ' const audio = new Audio(src);',\n            ' semis[i].addEventListener(\"mousedown\", () => {',\n            '  audio.currentTime = 0;',\n            '  audio.play();',\n            ' });',\n            '}'\n        );\n\n        string memory html = string.concat(\n            '%253C%2521DOCTYPE%2520html%253E%253Chtml%253E%253Chead%253E%253Cmeta%2520charset%253D%2522utf-8%2522%2520%252F%253E%253Ctitle%253ESemi%253C%252Ftitle%253E%253Cstyle%253Ebody%257Bmargin%253A0px%253B%257D.container%257Bposition%253Arelative%253Bwidth%253A100vmin%253Bheight%253A100vmin%253Bbackground-color%253A%2523f4f4f4%253B%257D.content%257Bposition%253Aabsolute%253Btop%253A0%253Bleft%253A0%253B%257D%253C%252Fstyle%253E%253C%252Fhead%253E%253Cbody%253E%253Cdiv%2520class%253D%2522container%2522%253E%250D%250A',\n            svgParts[0], svgParts[1], svgParts[2], svgParts[3],\n            '%253C%252Fdiv%253E%253Cscript%2520src%253D%2522data%253Atext%252Fjavascript%253Bbase64%252C',\n            Base64.encode(bytes(js)),\n            '%2522%253E%253C%252Fscript%253E%253C%252Fbody%253E%253C%252Fhtml%253E%250D%250A'\n        );\n\n        string memory json = string.concat(\n            'data:application/json,',\n            \"%7B\",\n            '%22name%22%3A%20%22Semi%20%23', tokenId.toString(), '%22%2C',\n            '%22description%22%3A%20%22Semi%22%2C',\n            '%22animation_url%22%3A%20%22data%3Atext%2Fhtml%2C', html, '%22',\n            \"%7D\"\n        );\n\n        return json;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n *\n * _Available since v4.5._\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 32)\n\n            // Run over the input, 3 bytes at a time\n            for {\n                let dataPtr := data\n                let endPtr := add(data, mload(data))\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 bytes (18 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F which is the number of\n                // the previous character in the ASCII table prior to the Base64 Table\n                // The result is then added to the table to get the character to write,\n                // and finally write it in the result pointer but with a left shift\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}